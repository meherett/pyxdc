#!/usr/bin/env python3

import json
import os

from pyxdc import HTTP_PROVIDER
from pyxdc.transaction import ContractTransaction
from pyxdc.utils import amount_unit_converter
from pyxdc.wallet import Wallet

# Test Values
base_path = os.path.dirname(__file__)
file_path = os.path.abspath(os.path.join(base_path, "..", "values.json"))
values = open(file_path, "r", encoding="utf-8")
_ = json.loads(values.read())
values.close()

# Contract bytecode
BYTECODE: str = "608060405234801561001057600080fd5b506040518060400160405280600581526020017f48656c6c6f00000000000" \
                "00000000000000000000000000000000000000000008152506000908051906020019061005c929190610062565b5061" \
                "0166565b82805461006e90610105565b90600052602060002090601f01602090048101928261009057600085556100d" \
                "7565b82601f106100a957805160ff19168380011785556100d7565b828001600101855582156100d7579182015b8281" \
                "11156100d65782518255916020019190600101906100bb565b5b5090506100e491906100e8565b5090565b5b8082111" \
                "56101015760008160009055506001016100e9565b5090565b6000600282049050600182168061011d57607f82169150" \
                "5b6020821081141561013157610130610137565b5b50919050565b7f4e487b710000000000000000000000000000000" \
                "0000000000000000000000000600052602260045260246000fd5b61053b806101756000396000f3fe60806040523480" \
                "1561001057600080fd5b50600436106100415760003560e01c8063a413686214610046578063cfae321714610062578" \
                "063ef690cc014610080575b600080fd5b610060600480360381019061005b91906102e3565b61009e565b005b61006a" \
                "6100b8565b604051610077919061035d565b60405180910390f35b61008861014a565b604051610095919061035d565" \
                "b60405180910390f35b80600090805190602001906100b49291906101d8565b5050565b6060600080546100c7906104" \
                "33565b80601f01602080910402602001604051908101604052809291908181526020018280546100f390610433565b8" \
                "0156101405780601f1061011557610100808354040283529160200191610140565b820191906000526020600020905b" \
                "81548152906001019060200180831161012357829003601f168201915b5050505050905090565b60008054610157906" \
                "10433565b80601f01602080910402602001604051908101604052809291908181526020018280546101839061043356" \
                "5b80156101d05780601f106101a5576101008083540402835291602001916101d0565b8201919060005260206000209" \
                "05b8154815290600101906020018083116101b357829003601f168201915b505050505081565b8280546101e4906104" \
                "33565b90600052602060002090601f016020900481019282610206576000855561024d565b82601f1061021f5780516" \
                "0ff191683800117855561024d565b8280016001018555821561024d579182015b8281111561024c5782518255916020" \
                "01919060010190610231565b5b50905061025a919061025e565b5090565b5b808211156102775760008160009055506" \
                "0010161025f565b5090565b600061028e610289846103a4565b61037f565b9050828152602081018484840111156102" \
                "a657600080fd5b6102b18482856103f1565b509392505050565b600082601f8301126102ca57600080fd5b81356102d" \
                "a84826020860161027b565b91505092915050565b6000602082840312156102f557600080fd5b600082013567ffffff" \
                "ffffffffff81111561030f57600080fd5b61031b848285016102b9565b91505092915050565b600061032f826103d55" \
                "65b61033981856103e0565b9350610349818560208601610400565b610352816104f4565b840191505092915050565b" \
                "600060208201905081810360008301526103778184610324565b905092915050565b600061038961039a565b9050610" \
                "3958282610465565b919050565b6000604051905090565b600067ffffffffffffffff8211156103bf576103be6104c5" \
                "565b5b6103c8826104f4565b9050602081019050919050565b600081519050919050565b60008282526020820190509" \
                "2915050565b82818337600083830152505050565b60005b8381101561041e5780820151818401526020810190506104" \
                "03565b8381111561042d576000848401525b50505050565b6000600282049050600182168061044b57607f821691505" \
                "b6020821081141561045f5761045e610496565b5b50919050565b61046e826104f4565b810181811067ffffffffffff" \
                "ffff8211171561048d5761048c6104c5565b5b80604052505050565b7f4e487b7100000000000000000000000000000" \
                "000000000000000000000000000600052602260045260246000fd5b7f4e487b71000000000000000000000000000000" \
                "00000000000000000000000000600052604160045260246000fd5b6000601f19601f830116905091905056fea264697" \
                "066735822122002786b5114bea14354170503b8bffe80a17bb5e4610cb41deca549935965f30864736f6c6343000803" \
                "0033"
# Contract ABI
ABI: list = [
    {'inputs': [], 'stateMutability': 'nonpayable', 'type': 'constructor'},
    {'inputs': [], 'name': 'greet', 'outputs': [{'internalType': 'string', 'name': '', 'type': 'string'}], 'stateMutability': 'view', 'type': 'function'},
    {'inputs': [], 'name': 'greeting', 'outputs': [{'internalType': 'string', 'name': '', 'type': 'string'}], 'stateMutability': 'view', 'type': 'function'},
    {'inputs': [{'internalType': 'string', 'name': '_greeting', 'type': 'string'}], 'name': 'setGreeting', 'outputs': [], 'stateMutability': 'nonpayable', 'type': 'function'}
]


def test_contract_transaction():

    wallet: Wallet = Wallet(
        provider=HTTP_PROVIDER
    ).from_entropy(
        entropy=_["wallet"]["entropy"],
        passphrase=_["wallet"]["passphrase"],
        language=_["wallet"]["language"]
    ).from_path(
        path=_["wallet"]["path"]
    )

    contract_transaction: ContractTransaction = ContractTransaction(
        provider=HTTP_PROVIDER
    )

    contract_transaction.build_transaction(
        address=wallet.address(prefix="xdc"),
        abi=ABI,
        bytecode=BYTECODE,
        value=amount_unit_converter(amount=0, unit="XDC2Wei"),
        estimate_gas=True
    )

    contract_transaction.sign_transaction(
        private_key=_["wallet"]["private_key"]
    )

    assert contract_transaction.fee() == _["transaction"]["contract_transaction"]["fee"]
    assert contract_transaction.hash() == _["transaction"]["contract_transaction"]["hash"]
    assert contract_transaction.raw() == _["transaction"]["contract_transaction"]["raw"]
    assert contract_transaction.json() == _["transaction"]["contract_transaction"]["json"]
