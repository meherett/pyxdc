#!/usr/bin/env python3

import json
import unicodedata
import os

from pyxdc.utils import (
    generate_entropy, generate_mnemonic, is_entropy, is_mnemonic, get_mnemonic_language,
    get_entropy_strength, get_mnemonic_strength, is_address, is_checksum_address, to_checksum_address,
    get_bytes, is_root_xprivate_key, is_root_xpublic_key, decode_transaction_raw
)

# Test Values
base_path: str = os.path.dirname(__file__)
file_path: str = os.path.abspath(os.path.join(base_path, "values.json"))
values = open(file_path, "r", encoding="utf-8")
_: dict = json.loads(values.read())
values.close()

TRANSACTION_RAW: str = "0xf90703058504a817c800831e84808080b906b0608060405234801561001057600080fd5b506040518060400160" \
                       "405280600581526020017f48656c6c6f000000000000000000000000000000000000000000000000000000815250" \
                       "6000908051906020019061005c929190610062565b50610166565b82805461006e90610105565b90600052602060" \
                       "002090601f01602090048101928261009057600085556100d7565b82601f106100a957805160ff19168380011785" \
                       "556100d7565b828001600101855582156100d7579182015b828111156100d6578251825591602001919060010190" \
                       "6100bb565b5b5090506100e491906100e8565b5090565b5b808211156101015760008160009055506001016100e9" \
                       "565b5090565b6000600282049050600182168061011d57607f821691505b60208210811415610131576101306101" \
                       "37565b5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052" \
                       "602260045260246000fd5b61053b806101756000396000f3fe608060405234801561001057600080fd5b50600436" \
                       "106100415760003560e01c8063a413686214610046578063cfae321714610062578063ef690cc014610080575b60" \
                       "0080fd5b610060600480360381019061005b91906102e3565b61009e565b005b61006a6100b8565b604051610077" \
                       "919061035d565b60405180910390f35b61008861014a565b604051610095919061035d565b60405180910390f35b" \
                       "80600090805190602001906100b49291906101d8565b5050565b6060600080546100c790610433565b80601f0160" \
                       "2080910402602001604051908101604052809291908181526020018280546100f390610433565b80156101405780" \
                       "601f1061011557610100808354040283529160200191610140565b820191906000526020600020905b8154815290" \
                       "6001019060200180831161012357829003601f168201915b5050505050905090565b600080546101579061043356" \
                       "5b80601f016020809104026020016040519081016040528092919081815260200182805461018390610433565b80" \
                       "156101d05780601f106101a5576101008083540402835291602001916101d0565b82019190600052602060002090" \
                       "5b8154815290600101906020018083116101b357829003601f168201915b505050505081565b8280546101e49061" \
                       "0433565b90600052602060002090601f016020900481019282610206576000855561024d565b82601f1061021f57" \
                       "805160ff191683800117855561024d565b8280016001018555821561024d579182015b8281111561024c57825182" \
                       "5591602001919060010190610231565b5b50905061025a919061025e565b5090565b5b8082111561027757600081" \
                       "600090555060010161025f565b5090565b600061028e610289846103a4565b61037f565b90508281526020810184" \
                       "84840111156102a657600080fd5b6102b18482856103f1565b509392505050565b600082601f8301126102ca5760" \
                       "0080fd5b81356102da84826020860161027b565b91505092915050565b6000602082840312156102f557600080fd" \
                       "5b600082013567ffffffffffffffff81111561030f57600080fd5b61031b848285016102b9565b91505092915050" \
                       "565b600061032f826103d5565b61033981856103e0565b9350610349818560208601610400565b610352816104f4" \
                       "565b840191505092915050565b600060208201905081810360008301526103778184610324565b90509291505056" \
                       "5b600061038961039a565b90506103958282610465565b919050565b6000604051905090565b600067ffffffffff" \
                       "ffffff8211156103bf576103be6104c5565b5b6103c8826104f4565b9050602081019050919050565b6000815190" \
                       "50919050565b600082825260208201905092915050565b82818337600083830152505050565b60005b8381101561" \
                       "041e578082015181840152602081019050610403565b8381111561042d576000848401525b50505050565b600060" \
                       "0282049050600182168061044b57607f821691505b6020821081141561045f5761045e610496565b5b5091905056" \
                       "5b61046e826104f4565b810181811067ffffffffffffffff8211171561048d5761048c6104c5565b5b8060405250" \
                       "5050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260" \
                       "246000fd5b7f4e487b71000000000000000000000000000000000000000000000000000000006000526041600452" \
                       "60246000fd5b6000601f19601f830116905091905056fea264697066735822122002786b5114bea14354170503b8" \
                       "bffe80a17bb5e4610cb41deca549935965f30864736f6c634300080300331ca0f2704e20656acf4b067c23ff6e7e" \
                       "2bf8e9b6f75383c408607fce7f90ef39aedba07612be142f5202b3970ee9b4c821bd95df4eb007735acc9c145b0d" \
                       "204d697f8c"


TRANSACTION_JSON: dict = {
    'hash': '0x57232e7e3f0e4f5f49cad5074bea10c98ee18efd4371e15c163560b8bc8ebb40',
    'from': '0x68bF25F60508C2820d3D72E1806503F0955eFf94',
    'to': None,
    'nonce': 5,
    'gas': 2000000,
    'gas_price': 20000000000,
    'value': 0,
    'data': '0x608060405234801561001057600080fd5b506040518060400160405280600581526020017f48656c6c6f00000000000000000'
            '00000000000000000000000000000000000008152506000908051906020019061005c929190610062565b50610166565b828054'
            '61006e90610105565b90600052602060002090601f01602090048101928261009057600085556100d7565b82601f106100a9578'
            '05160ff19168380011785556100d7565b828001600101855582156100d7579182015b828111156100d657825182559160200191'
            '90600101906100bb565b5b5090506100e491906100e8565b5090565b5b808211156101015760008160009055506001016100e95'
            '65b5090565b6000600282049050600182168061011d57607f821691505b6020821081141561013157610130610137565b5b5091'
            '9050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6'
            '1053b806101756000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c8063a4136862'
            '14610046578063cfae321714610062578063ef690cc014610080575b600080fd5b610060600480360381019061005b91906102e'
            '3565b61009e565b005b61006a6100b8565b604051610077919061035d565b60405180910390f35b61008861014a565b60405161'
            '0095919061035d565b60405180910390f35b80600090805190602001906100b49291906101d8565b5050565b606060008054610'
            '0c790610433565b80601f01602080910402602001604051908101604052809291908181526020018280546100f390610433565b'
            '80156101405780601f1061011557610100808354040283529160200191610140565b820191906000526020600020905b8154815'
            '2906001019060200180831161012357829003601f168201915b5050505050905090565b6000805461015790610433565b80601f'
            '016020809104026020016040519081016040528092919081815260200182805461018390610433565b80156101d05780601f106'
            '101a5576101008083540402835291602001916101d0565b820191906000526020600020905b8154815290600101906020018083'
            '116101b357829003601f168201915b505050505081565b8280546101e490610433565b90600052602060002090601f016020900'
            '481019282610206576000855561024d565b82601f1061021f57805160ff191683800117855561024d565b828001600101855582'
            '1561024d579182015b8281111561024c578251825591602001919060010190610231565b5b50905061025a919061025e565b509'
            '0565b5b8082111561027757600081600090555060010161025f565b5090565b600061028e610289846103a4565b61037f565b90'
            '50828152602081018484840111156102a657600080fd5b6102b18482856103f1565b509392505050565b600082601f830112610'
            '2ca57600080fd5b81356102da84826020860161027b565b91505092915050565b6000602082840312156102f557600080fd5b60'
            '0082013567ffffffffffffffff81111561030f57600080fd5b61031b848285016102b9565b91505092915050565b600061032f8'
            '26103d5565b61033981856103e0565b9350610349818560208601610400565b610352816104f4565b840191505092915050565b'
            '600060208201905081810360008301526103778184610324565b905092915050565b600061038961039a565b905061039582826'
            '10465565b919050565b6000604051905090565b600067ffffffffffffffff8211156103bf576103be6104c5565b5b6103c88261'
            '04f4565b9050602081019050919050565b600081519050919050565b600082825260208201905092915050565b8281833760008'
            '3830152505050565b60005b8381101561041e578082015181840152602081019050610403565b8381111561042d576000848401'
            '525b50505050565b6000600282049050600182168061044b57607f821691505b6020821081141561045f5761045e610496565b5'
            'b50919050565b61046e826104f4565b810181811067ffffffffffffffff8211171561048d5761048c6104c5565b5b8060405250'
            '5050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7'
            'f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000601f19'
            '601f830116905091905056fea264697066735822122002786b5114bea14354170503b8bffe80a17bb5e4610cb41deca54993596'
            '5f30864736f6c63430008030033',
    'chain_id': -4,
    'r': '0xf2704e20656acf4b067c23ff6e7e2bf8e9b6f75383c408607fce7f90ef39aedb',
    's': '0x7612be142f5202b3970ee9b4c821bd95df4eb007735acc9c145b0d204d697f8c',
    'v': 28
}


def test_utils():

    assert isinstance(get_bytes(string=b"meherett"), bytes)

    assert is_address("xdc1ee11011ae12103a488a82dc33e03f337bc93ba7")
    assert is_address("xdc1Ee11011ae12103a488A82DC33e03f337Bc93ba7")

    assert not is_checksum_address("xdc1ee11011ae12103a488a82dc33e03f337bc93ba7")
    assert is_checksum_address("xdc1Ee11011ae12103a488A82DC33e03f337Bc93ba7")

    assert to_checksum_address("xdc1ee11011ae12103a488a82dc33e03f337bc93ba7") == "xdc1Ee11011ae12103a488A82DC33e03f337Bc93ba7"

    assert is_root_xprivate_key(xprivate_key=_["wallet"]["root_xprivate_key"])
    assert not is_root_xprivate_key(xprivate_key=_["wallet"]["xprivate_key"])

    assert is_root_xpublic_key(xpublic_key=_["wallet"]["root_xpublic_key"])
    assert not is_root_xpublic_key(xpublic_key=_["wallet"]["xpublic_key"])

    assert decode_transaction_raw(transaction_raw=TRANSACTION_RAW) == TRANSACTION_JSON


def test_utils_entropy():

    assert len(generate_entropy(strength=128)) == 32
    assert len(generate_entropy(strength=160)) == 40
    assert len(generate_entropy(strength=192)) == 48
    assert len(generate_entropy(strength=224)) == 56
    assert len(generate_entropy(strength=256)) == 64

    for entropy in _["utils"]["entropy's"]:

        assert len(entropy["entropy"]) == entropy["length"]
        assert get_entropy_strength(entropy["entropy"]) == entropy["strength"]
        assert is_entropy(entropy["entropy"])


def test_utils_mnemonic():

    assert len(generate_mnemonic(strength=128).split(" ")) == 12
    assert len(generate_mnemonic(strength=160).split(" ")) == 15
    assert len(generate_mnemonic(strength=192).split(" ")) == 18
    assert len(generate_mnemonic(strength=224).split(" ")) == 21
    assert len(generate_mnemonic(strength=256).split(" ")) == 24

    for mnemonic in _["utils"]["mnemonics"]:

        assert len(unicodedata.normalize("NFKD", mnemonic["mnemonic"]).split(" ")) == mnemonic["words"]
        assert get_mnemonic_strength(mnemonic["mnemonic"]) == mnemonic["strength"]
        assert is_mnemonic(mnemonic["mnemonic"])
        if mnemonic["language"] == "english":
            assert not is_mnemonic(mnemonic["mnemonic"], "korean")
        assert is_mnemonic(mnemonic["mnemonic"], mnemonic["language"])
        assert get_mnemonic_language(mnemonic["mnemonic"]) == mnemonic["language"]
